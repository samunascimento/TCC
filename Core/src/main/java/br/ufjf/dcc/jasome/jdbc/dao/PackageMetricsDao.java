/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufjf.dcc.jasome.jdbc.dao;

import br.ufjf.dcc.gmr.core.db.ConnectionFactory;
import br.ufjf.dcc.gmr.core.jasome.model.Metric;
import br.ufjf.dcc.gmr.core.jasome.model.PackageMetrics;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

/**
 *
 * @author anton
 */
public class PackageMetricsDao {

    private final Connection connection;

    public PackageMetricsDao() {
        this.connection = ConnectionFactory.getConnection();
    }

    public int insert(PackageMetrics packageMetrics) throws SQLException {

        String sql = "INSERT INTO tb_packageMetrics "
                + "(aID,ccrcID,caID,ceID,dmsID,iID,nocID,noiID,pkgRCiD,pkgTCiID,tlocID) "
                + "VALUES (?,?,?,?,?,?,?,?,?,?,?) "
                + "RETURNING id;";

        PreparedStatement stmt = null;

        ResultSet tableKeys = null;

        try {
            stmt = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
            stmt.setInt(1, packageMetrics.getA().getId());
            stmt.setInt(2, packageMetrics.getCcrc().getId());
            stmt.setInt(3, packageMetrics.getCa().getId());
            stmt.setInt(4, packageMetrics.getCe().getId());
            stmt.setInt(5, packageMetrics.getDms().getId());
            stmt.setInt(6, packageMetrics.getI().getId());
            stmt.setInt(7, packageMetrics.getNoc().getId());
            stmt.setInt(8, packageMetrics.getNoi().getId());
            stmt.setInt(9, packageMetrics.getPkgRCi().getId());
            stmt.setInt(10, packageMetrics.getPkgTCi().getId());
            stmt.setInt(11, packageMetrics.getTloc().getId());

            tableKeys = stmt.executeQuery();
            //tableKeys = stmt.getGeneratedKeys();
            tableKeys.next();
            int autoGeneratedID = tableKeys.getInt(1);
            return autoGeneratedID;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public void delete(int id) throws SQLException {
        String sql = "DELETE FROM tb_packageMetrics WHERE ID = ?";

        PreparedStatement stmt = null;

        try {
            stmt = connection.prepareStatement(sql);
            //set values
            stmt.setInt(1, id);
            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public List<PackageMetrics> select() throws SQLException {
        MetricDao metrics = new MetricDao();
        List<PackageMetrics> listPackageMetrics = new ArrayList<>();
        PackageMetrics packageMetrics = null;
        MetricDao metricDao = new MetricDao();

        String sql = "SELECT * FROM tb_packageMetrics";

        PreparedStatement stmt = null;

        ResultSet resultSet = null;

        try {
            stmt = connection.prepareStatement(sql);
            //set values
            //stmt.setInt(1, projectMetrics.getId());
            //stmt.setString(2, projectMetrics.getSourceDir());
            resultSet = stmt.executeQuery();
            //tableKeys = stmt.getGeneratedKeys();
            while (resultSet.next()) {
                
                packageMetrics = new PackageMetrics();
                
                int aID = resultSet.getInt("aID");
                int ccrcID = resultSet.getInt("ccrcID");
                int caID = resultSet.getInt("caID");
                int ceID = resultSet.getInt("ceID");
                int dmsID = resultSet.getInt("dmsID");
                int iID = resultSet.getInt("iID");
                int nocID = resultSet.getInt("nocID");
                int noiID = resultSet.getInt("noiID");
                int pkgrcID = resultSet.getInt("pkgRCiD");
                int pkgtciID = resultSet.getInt("pkgTCiID");
                int tlocID = resultSet.getInt("tlocID");

                packageMetrics.setA(metrics.selectID(aID));
                packageMetrics.setCcrc(metrics.selectID(ccrcID));
                packageMetrics.setCa(metrics.selectID(caID));
                packageMetrics.setCe(metrics.selectID(ceID));
                packageMetrics.setDms(metrics.selectID(dmsID));
                packageMetrics.setI(metrics.selectID(iID));
                packageMetrics.setNoc(metrics.selectID(nocID));
                packageMetrics.setNoi(metrics.selectID(noiID));
                packageMetrics.setPkgRCi(metrics.selectID(pkgrcID));
                packageMetrics.setPkgTCi(metrics.selectID(pkgtciID));
                packageMetrics.setTloc(metrics.selectID(tlocID));

                int packageId = resultSet.getInt("id");
                packageMetrics.setId(packageId);

                listPackageMetrics.add(packageMetrics);
            }

            return listPackageMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public PackageMetrics selectID(int id) throws SQLException {
        MetricDao metrics = new MetricDao();
        PackageMetrics packageMetrics = null;

        String sql = "SELECT * FROM tb_packageMetrics WHERE ID = " + id;

        PreparedStatement stmt = null;

        ResultSet resultSet = null;

        try {
            stmt = connection.prepareStatement(sql);
            resultSet = stmt.executeQuery();

            //tableKeys = stmt.getGeneratedKeys();
            resultSet.next();

            packageMetrics = new PackageMetrics();

            int aID = resultSet.getInt("aID");
            int ccrcID = resultSet.getInt("ccrcID");
            int caID = resultSet.getInt("caID");
            int ceID = resultSet.getInt("ceID");
            int dmsID = resultSet.getInt("dmsID");
            int iID = resultSet.getInt("iID");
            int nocID = resultSet.getInt("nocID");
            int noiID = resultSet.getInt("noiID");
            int pkgrcID = resultSet.getInt("pkgRCiD");
            int pkgtciID = resultSet.getInt("pkgTCiID");
            int tlocID = resultSet.getInt("tlocID");

            packageMetrics.setA(metrics.selectID(aID));
            packageMetrics.setCcrc(metrics.selectID(ccrcID));
            packageMetrics.setCa(metrics.selectID(caID));
            packageMetrics.setCe(metrics.selectID(ceID));
            packageMetrics.setDms(metrics.selectID(dmsID));
            packageMetrics.setI(metrics.selectID(iID));
            packageMetrics.setNoc(metrics.selectID(nocID));
            packageMetrics.setNoi(metrics.selectID(noiID));
            packageMetrics.setPkgRCi(metrics.selectID(pkgrcID));
            packageMetrics.setPkgTCi(metrics.selectID(pkgtciID));
            packageMetrics.setTloc(metrics.selectID(tlocID));

            int packageId = resultSet.getInt("id");
            packageMetrics.setId(packageId);
            
            return packageMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public void update(Metric metric, int id) throws SQLException {
        String sql = "UPDATE tb_packageMetrics SET '" + metric.getName() + " = '" + metric.getValue() + "' WHERE ID = '" + id + "'";

        PreparedStatement stmt = null;

        try {
            stmt = connection.prepareStatement(sql);
            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);

        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }
}
