/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufjf.dcc.jasome.jdbc.dao;

import br.ufjf.dcc.gmr.core.db.ConnectionFactory;
import br.ufjf.dcc.gmr.core.jasome.model.Metric;
import br.ufjf.dcc.gmr.core.jasome.model.PackageMetrics;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

/**
 *
 * @author anton
 */
public class PackageMetricsDao {

    private final Connection connection;

    public PackageMetricsDao() {
        this.connection = ConnectionFactory.getConnection();
    }

    public int insert(PackageMetrics packageMetrics) throws SQLException {

        String sql = "INSERT INTO tb_packageMetrics "
                + "(aID,ccrcID,caID,ceID,dmsID,iID,nocID,noiID,pkgRCiD,pkgTCiID,tlocID) "
                + "VALUES (?,?,?,?,?,?,?,?,?,?,?) "
                + "RETURNING id;";
        
        PreparedStatement stmt = null;
        
         ResultSet tableKeys = null;
        
        try {
            stmt = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
            stmt.setInt(1, packageMetrics.getA().getId());
            stmt.setInt(2, packageMetrics.getCcrc().getId());
            stmt.setInt(3, packageMetrics.getCa().getId());
            stmt.setInt(4, packageMetrics.getCe().getId());
            stmt.setInt(5, packageMetrics.getDms().getId());
            stmt.setInt(6, packageMetrics.getI().getId());
            stmt.setInt(7, packageMetrics.getNoc().getId());
            stmt.setInt(8, packageMetrics.getNoi().getId());
            stmt.setInt(9, packageMetrics.getPkgRCi().getId());
            stmt.setInt(10, packageMetrics.getPkgTCi().getId());
            stmt.setInt(11, packageMetrics.getTloc().getId());
            
            tableKeys = stmt.executeQuery();
            //tableKeys = stmt.getGeneratedKeys();
            tableKeys.next();
            int autoGeneratedID = tableKeys.getInt(1);
            return autoGeneratedID;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public void delete(int id) throws SQLException {
        String sql = "DELETE FROM tb_packageMetrics WHERE ID = ?";
        
        PreparedStatement stmt = null; 
                
        try {
            stmt = connection.prepareStatement(sql);
            //set values
            stmt.setInt(1, id);
            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public List<PackageMetrics> select() throws SQLException {
        MetricDao metrics = new MetricDao();
        List<PackageMetrics> listPackageMetrics = new ArrayList<>();
        PackageMetrics packageMetrics = new PackageMetrics();

        String sql = "SELECT * FROM tb_packageMetrics";
        
        PreparedStatement stmt = null;
        
        ResultSet tableKeys = null;
                
        try {
            stmt = connection.prepareStatement(sql);
            //set values
            //stmt.setInt(1, projectMetrics.getId());
            //stmt.setString(2, projectMetrics.getSourceDir());
            tableKeys = stmt.executeQuery();
            //tableKeys = stmt.getGeneratedKeys();
            while (tableKeys.next()) {
                int aID = tableKeys.getInt("aID");
                int ccrcID = tableKeys.getInt("ccrcID");
                int caID = tableKeys.getInt("caID");
                int ceID = tableKeys.getInt("ceID");
                int dmsID = tableKeys.getInt("dmsID");
                int iID = tableKeys.getInt("iID");
                int nocID = tableKeys.getInt("nocID");
                int noiID = tableKeys.getInt("noiID");
                int pkgrcID = tableKeys.getInt("pkgRCiD");
                int pkgtciID = tableKeys.getInt("pkgTCiID");
                int tlocID = tableKeys.getInt("tlocID");

                packageMetrics.getA().setId(aID);
                packageMetrics.getCcrc().setId(ccrcID);
                packageMetrics.getCa().setId(caID);
                packageMetrics.getCe().setId(ceID);
                packageMetrics.getDms().setId(dmsID);
                packageMetrics.getI().setId(iID);
                packageMetrics.getNoc().setId(nocID);
                packageMetrics.getNoi().setId(noiID);
                packageMetrics.getPkgRCi().setId(pkgrcID);
                packageMetrics.getPkgTCi().setId(pkgtciID);
                packageMetrics.getTloc().setId(tlocID);

                int packageId = tableKeys.getInt(1);
                packageMetrics.setId(packageId);
                packageMetrics.setA(metrics.selectID(packageMetrics.getA().getId()));
                packageMetrics.setCcrc(metrics.selectID(packageMetrics.getCcrc().getId()));
                packageMetrics.setCa(metrics.selectID(packageMetrics.getCa().getId()));
                packageMetrics.setCe(metrics.selectID(packageMetrics.getCe().getId()));
                packageMetrics.setDms(metrics.selectID(packageMetrics.getDms().getId()));
                packageMetrics.setI(metrics.selectID(packageMetrics.getI().getId()));
                packageMetrics.setNoc(metrics.selectID(packageMetrics.getNoc().getId()));
                packageMetrics.setNoi(metrics.selectID(packageMetrics.getNoi().getId()));
                packageMetrics.setPkgRCi(metrics.selectID(packageMetrics.getPkgRCi().getId()));
                packageMetrics.setPkgTCi(metrics.selectID(packageMetrics.getPkgTCi().getId()));
                packageMetrics.setTloc(metrics.selectID(packageMetrics.getTloc().getId()));

                listPackageMetrics.add(packageMetrics);
            }

            return listPackageMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public PackageMetrics selectID(int id) throws SQLException {
        MetricDao metrics = new MetricDao();
        PackageMetrics packageMetrics;
        packageMetrics = new PackageMetrics();

        String sql = "SELECT * FROM tb_packageMetrics WHERE ID = " + id;
        
        PreparedStatement stmt = null;
        
        ResultSet tableKeys = null;
        
        try {
            stmt = connection.prepareStatement(sql);
            tableKeys = stmt.executeQuery();

            //tableKeys = stmt.getGeneratedKeys();
            tableKeys.next();

            int aID = tableKeys.getInt("aID");
            int ccrcID = tableKeys.getInt("ccrcID");
            int caID = tableKeys.getInt("caID");
            int ceID = tableKeys.getInt("ceID");
            int dmsID = tableKeys.getInt("dmsID");
            int iID = tableKeys.getInt("iID");
            int nocID = tableKeys.getInt("nocID");
            int noiID = tableKeys.getInt("noiID");
            int pkgrcID = tableKeys.getInt("pkgRCiD");
            int pkgtciID = tableKeys.getInt("pkgTCiID");
            int tlocID = tableKeys.getInt("tlocID");

            packageMetrics.getA().setId(aID);
            packageMetrics.getCcrc().setId(ccrcID);
            packageMetrics.getCa().setId(caID);
            packageMetrics.getCe().setId(ceID);
            packageMetrics.getDms().setId(dmsID);
            packageMetrics.getI().setId(iID);
            packageMetrics.getNoc().setId(nocID);
            packageMetrics.getNoi().setId(noiID);
            packageMetrics.getPkgRCi().setId(pkgrcID);
            packageMetrics.getPkgTCi().setId(pkgtciID);
            packageMetrics.getTloc().setId(tlocID);

            int packageId = tableKeys.getInt(1);
            packageMetrics.setId(packageId);
            
            packageMetrics.setA(metrics.selectID(packageMetrics.getA().getId()));
            packageMetrics.setCcrc(metrics.selectID(packageMetrics.getCcrc().getId()));
            packageMetrics.setCa(metrics.selectID(packageMetrics.getCa().getId()));
            packageMetrics.setCe(metrics.selectID(packageMetrics.getCe().getId()));
            packageMetrics.setDms(metrics.selectID(packageMetrics.getDms().getId()));
            packageMetrics.setI(metrics.selectID(packageMetrics.getI().getId()));
            packageMetrics.setNoc(metrics.selectID(packageMetrics.getNoc().getId()));
            packageMetrics.setNoi(metrics.selectID(packageMetrics.getNoi().getId()));
            packageMetrics.setPkgRCi(metrics.selectID(packageMetrics.getPkgRCi().getId()));
            packageMetrics.setPkgTCi(metrics.selectID(packageMetrics.getPkgTCi().getId()));
            packageMetrics.setTloc(metrics.selectID(packageMetrics.getTloc().getId()));
            
            return packageMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public void update(Metric metric, int id) throws SQLException {
        String sql = "UPDATE tb_packageMetrics SET '" + metric.getName() + " = '" + metric.getValue() + "' WHERE ID = '" + id + "'";
        
        PreparedStatement stmt = null;
                
        try {
            stmt = connection.prepareStatement(sql);
            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);

        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }
}
