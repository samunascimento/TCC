/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufjf.dcc.jasome.jdbc.dao;

import br.ufjf.dcc.gmr.core.db.ConnectionFactory;
import br.ufjf.dcc.gmr.core.jasome.model.Metric;
import br.ufjf.dcc.gmr.core.jasome.model.PackageMetrics;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author anton
 */
public class MetricDao {

    private Connection connection;
    ResultSet tableKeys;

    public MetricDao() {
        this.connection = ConnectionFactory.getConnection();

    }

    public int insert(Metric metric) {

        String sql = "INSERT INTO tb_metric "
                + "(name, description, value)"
                + "VALUES (?,?,?);";
        try {
            PreparedStatement stmt = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);

            stmt.setString(1, metric.getName());
            stmt.setString(2, metric.getDescription());
            stmt.setDouble(3, metric.getValue());

            stmt.executeUpdate();

            ResultSet tableKeys = stmt.getGeneratedKeys();
            tableKeys.next();
            int autoGeneratedID = tableKeys.getInt(1);

            return autoGeneratedID;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<Metric> select(int id) throws SQLException {
        Metric metric;
        metric = new Metric();
        List<Metric> listMetrics = new ArrayList<>();

        String sql = "SELECT * FROM tb_metric WHERE ID = " + id;
        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            stmt.executeUpdate();
            stmt.close();
            tableKeys = stmt.getGeneratedKeys();
            while (tableKeys.next()) {
                metric.setId(tableKeys.getInt(1));
                metric.setName(tableKeys.getString("name"));
                metric.setDescription(tableKeys.getString("description"));
                metric.setValue(tableKeys.getDouble("value"));
                listMetrics.add(metric);
            }
            return listMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public Metric selectID(int id) throws SQLException {
        Metric metric;
        metric = new Metric();

        String sql = "SELECT * FROM tb_metric WHERE ID = " + id;
        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            stmt.executeUpdate();
            stmt.close();
            tableKeys = stmt.getGeneratedKeys();
            tableKeys.next();
            metric.setId(tableKeys.getInt(1));
            metric.setName(tableKeys.getString("name"));
            metric.setDescription(tableKeys.getString("description"));
            metric.setValue(tableKeys.getDouble("value"));
            return metric;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

}
