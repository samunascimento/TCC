/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufjf.dcc.jasome.jdbc.dao;

import br.ufjf.dcc.gmr.core.db.ConnectionFactory;
import br.ufjf.dcc.gmr.core.jasome.model.MethodMetrics;
import br.ufjf.dcc.gmr.core.jasome.model.Metric;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author anton
 */
public class MethodMetricsDao {

    private Connection connection;
    List<MethodMetrics> listMethodMetrics;
    MethodMetrics methodMetrics;
    ResultSet tableKeys;

    public MethodMetricsDao(Connection connection) {
        this.connection = connection;
        listMethodMetrics = new ArrayList<>();
    }

    public int insert(MethodMetrics methodMetrics) {
        String sql = "INSERT INTO tb_methodMetrics "
                + "(ciID,diID,finID,foutID,iovarsID,mclcID,nbdID,ncompID,nopID,nvarID,siID,tlocID,vgID)"
                + "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) "
                + "RETURNING id;";

        PreparedStatement stmt = null;
        ResultSet tableKeys = null;

        try {
            stmt = connection.prepareStatement(sql);

            if (methodMetrics.getCi() == null) {
                stmt.setNull(1, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(1, methodMetrics.getCi().getId());
            }
            if (methodMetrics.getDi() == null) {
                stmt.setNull(2, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(2, methodMetrics.getDi().getId());
            }
            if (methodMetrics.getFin() == null) {
                stmt.setNull(3, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(3, methodMetrics.getFin().getId());
            }
            if (methodMetrics.getFout() == null) {
                stmt.setNull(4, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(4, methodMetrics.getFout().getId());
            }
            if (methodMetrics.getIovars() == null) {
                stmt.setNull(5, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(5, methodMetrics.getIovars().getId());
            }
            if (methodMetrics.getMclc() == null) {
                stmt.setNull(6, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(6, methodMetrics.getMclc().getId());
            }
            if (methodMetrics.getNbd() == null) {
                stmt.setNull(7, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(7, methodMetrics.getNbd().getId());
            }
            if (methodMetrics.getNcomp() == null) {
                stmt.setNull(8, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(8, methodMetrics.getNcomp().getId());
            }
            if (methodMetrics.getNop() == null) {
                stmt.setNull(9, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(9, methodMetrics.getNop().getId());
            }
            if (methodMetrics.getNvar() == null) {
                stmt.setNull(10, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(10, methodMetrics.getNvar().getId());
            }
            if (methodMetrics.getSi() == null) {
                stmt.setNull(11, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(11, methodMetrics.getSi().getId());
            }
            if (methodMetrics.getTloc() == null) {
                stmt.setNull(12, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(12, methodMetrics.getTloc().getId());
            }
            if (methodMetrics.getVg() == null) {
                stmt.setNull(13, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(13, methodMetrics.getVg().getId());
            }
            //   stmt.setInt(14, methodMetrics.getClassId());

            tableKeys = stmt.executeQuery();
            tableKeys.next();
            int autoGeneratedID = tableKeys.getInt(1);
            stmt.close();
            return autoGeneratedID;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<MethodMetrics> select() {
        String sql = "SELECT * FROM tb_methodMetrics";

        MethodMetrics methodMetrics = null;
        List<MethodMetrics> listMethodMetrics = new ArrayList<>();
        MetricDao metricDao = new MetricDao(connection);
        PreparedStatement stmt = null;

        ResultSet resultSet = null;
        try {
            stmt = connection.prepareStatement(sql);
            resultSet = stmt.executeQuery();
            while (resultSet.next()) {

                methodMetrics = new MethodMetrics();

                methodMetrics.setCi(insert(resultSet, metricDao, "ciID"));
                methodMetrics.setDi(insert(resultSet, metricDao, "diID"));
                methodMetrics.setFin(insert(resultSet, metricDao, "finID"));
                methodMetrics.setFout(insert(resultSet, metricDao, "foutID"));
                methodMetrics.setIovars(insert(resultSet, metricDao, "iovarsID"));
                methodMetrics.setMclc(insert(resultSet, metricDao, "mclcID"));
                methodMetrics.setNbd(insert(resultSet, metricDao, "nbdID"));
                methodMetrics.setNcomp(insert(resultSet, metricDao, "ncompID"));
                methodMetrics.setNop(insert(resultSet, metricDao, "nopID"));
                methodMetrics.setNvar(insert(resultSet, metricDao, "nvarID"));
                methodMetrics.setSi(insert(resultSet, metricDao, "siID"));
                methodMetrics.setTloc(insert(resultSet, metricDao, "tlocID"));
                methodMetrics.setVg(insert(resultSet, metricDao, "vgID"));

                methodMetrics.setId(resultSet.getInt("id"));

            }
            listMethodMetrics.add(methodMetrics);
            stmt.close();
            return listMethodMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }

    public MethodMetrics selectID(int id) throws SQLException {
        MetricDao metricDao = new MetricDao(connection);
        MethodMetrics methodMetrics = null;
        String sql = "SELECT * FROM tb_methodMetrics WHERE ID = " + id;

        PreparedStatement stmt = null;

        ResultSet resultSet = null;

        try {
            stmt = connection.prepareStatement(sql);
            resultSet = stmt.executeQuery();
            resultSet.next();
            methodMetrics = new MethodMetrics();

            methodMetrics.setCi(insert(resultSet, metricDao, "ciID"));
            methodMetrics.setDi(insert(resultSet, metricDao, "diID"));
            methodMetrics.setFin(insert(resultSet, metricDao, "finID"));
            methodMetrics.setFout(insert(resultSet, metricDao, "foutID"));
            methodMetrics.setIovars(insert(resultSet, metricDao, "iovarsID"));
            methodMetrics.setMclc(insert(resultSet, metricDao, "mclcID"));
            methodMetrics.setNbd(insert(resultSet, metricDao, "nbdID"));
            methodMetrics.setNcomp(insert(resultSet, metricDao, "ncompID"));
            methodMetrics.setNop(insert(resultSet, metricDao, "nopID"));
            methodMetrics.setNvar(insert(resultSet, metricDao, "nvarID"));
            methodMetrics.setSi(insert(resultSet, metricDao, "siID"));
            methodMetrics.setTloc(insert(resultSet, metricDao, "tlocID"));
            methodMetrics.setVg(insert(resultSet, metricDao, "vgID"));

            int methodId = resultSet.getInt("id");
            methodMetrics.setId(methodId);

            return methodMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public Metric insert(ResultSet resultSet, MetricDao metricDao, String name) throws SQLException {

        if (resultSet.getInt(name) == 0) {
            return null;
        } else {
            int ID = resultSet.getInt(name);
            Metric metric = metricDao.selectID(ID);
            return metric;
        }
    }

    public void delete(int id) {
        String sql = "DELETE FROM tb_methodMetrics WHERE id = ? ";

        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            //set values
            stmt.setInt(1, id);
            stmt.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void update(MethodMetrics methodMetric) throws SQLException {
        String sql = null; // "UPDATE tb_methodMetrics SET classID = ? WHERE ID = ? ;";
        System.out.println(sql);

        PreparedStatement stmt = null;
        try {
            stmt = connection.prepareStatement(sql);
            stmt.setInt(1, methodMetric.getClassId());
            stmt.setInt(2, methodMetric.getId());
            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public void updateClassId(MethodMetrics methodMetric) throws SQLException {
        String sql = "UPDATE tb_methodMetrics SET classID = ? WHERE ID = ? ;";
        System.out.println(sql);

        PreparedStatement stmt = null;
        try {
            stmt = connection.prepareStatement(sql);
            stmt.setInt(1, methodMetric.getClassId());
            stmt.setInt(2, methodMetric.getId());
            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }
}
