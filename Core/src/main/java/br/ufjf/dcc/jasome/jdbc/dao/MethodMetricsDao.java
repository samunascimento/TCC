/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufjf.dcc.jasome.jdbc.dao;

import br.ufjf.dcc.gmr.core.db.ConnectionFactory;
import br.ufjf.dcc.gmr.core.jasome.model.MethodMetrics;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author anton
 */
public class MethodMetricsDao {

    private Connection connection;
    List<MethodMetrics> listMethodMetrics;
    MethodMetrics methodMetrics;
    ResultSet tableKeys;

    public MethodMetricsDao() {
        this.connection = ConnectionFactory.getConnection();
        listMethodMetrics = new ArrayList<>();
    }

    public int insert(MethodMetrics methodMetrics) {
        String sql = "INSERT INTO tb_methodMetrics "
                + "(ci,di,fin,fout,iovars,mclc,nbd,ncomp,nop,nvar,si,tloc,vg)"
                + "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) "
                + "RETURNING id;";
        
        PreparedStatement stmt = null;
        ResultSet tableKeys = null;
        
        try {
            stmt = connection.prepareStatement(sql);
            
            stmt.setInt(1, methodMetrics.getCi().getId());
            stmt.setInt(2, methodMetrics.getDi().getId());
            stmt.setInt(3, methodMetrics.getFin().getId());
            stmt.setInt(4, methodMetrics.getFout().getId());
            stmt.setInt(5, methodMetrics.getIovars().getId());
            stmt.setInt(6, methodMetrics.getMclc().getId());
            stmt.setInt(7, methodMetrics.getNbd().getId());
            stmt.setInt(8, methodMetrics.getNcomp().getId());
            stmt.setInt(9, methodMetrics.getNop().getId());
            stmt.setInt(10, methodMetrics.getNvar().getId());
            stmt.setInt(11, methodMetrics.getSi().getId());
            stmt.setInt(12, methodMetrics.getTloc().getId());
            stmt.setInt(13, methodMetrics.getVg().getId());
            
            tableKeys = stmt.executeQuery();
            tableKeys.next();
            int autoGeneratedID = tableKeys.getInt(1);
            stmt.close();
            return autoGeneratedID;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<MethodMetrics> select() {
        String sql = "SELECT * FROM tb_methodMetrics";

        try {
            PreparedStatement stmt = connection.prepareStatement(sql);

            while (tableKeys.next()) {
                int ciID = tableKeys.getInt("ciID");
                int diID = tableKeys.getInt("diID");
                int finID = tableKeys.getInt("finID");
                int foutID = tableKeys.getInt("foutID");
                int iovarsID = tableKeys.getInt("iovarsID");
                int mclcID = tableKeys.getInt("mclcID");
                int nbdID = tableKeys.getInt("nbdID");
                int ncompID = tableKeys.getInt("ncompID");
                int nopID = tableKeys.getInt("nopID");
                int nvarID = tableKeys.getInt("nvarID");
                int siID = tableKeys.getInt("siID");
                int tlocID = tableKeys.getInt("tlocID");
                int vgID = tableKeys.getInt("vgID");

                methodMetrics.getCi().setId(ciID);
                methodMetrics.getDi().setId(diID);
                methodMetrics.getFin().setId(finID);
                methodMetrics.getFout().setId(foutID);
                methodMetrics.getIovars().setId(iovarsID);
                methodMetrics.getMclc().setId(mclcID);
                methodMetrics.getNbd().setId(nbdID);
                methodMetrics.getNcomp().setId(ncompID);
                methodMetrics.getNop().setId(nopID);
                methodMetrics.getNvar().setId(nvarID);
                methodMetrics.getSi().setId(siID);
                methodMetrics.getTloc().setId(tlocID);
                methodMetrics.getVg().setId(vgID);

                this.listMethodMetrics.add(methodMetrics);

            }
            stmt.executeUpdate();
            stmt.close();
            return this.listMethodMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }

    public void delete(int id) {
        String sql = "DELETE FROM tb_methodMetrics WHERE id = ? ";

        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            //set values
            stmt.setInt(1, id);
            stmt.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void update(String column, String columnValue, int id) {
        String sql = "UPDATE tb_methodMetrics SET " + column + " = '" + columnValue + "' WHERE ID = '" + id + "'";
        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            stmt.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}
