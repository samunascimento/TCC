/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufjf.dcc.jasome.jdbc.dao;

import br.ufjf.dcc.gmr.core.db.ConnectionFactory;
import br.ufjf.dcc.gmr.core.jasome.model.MethodMetrics;
import br.ufjf.dcc.gmr.core.jasome.model.Metric;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author anton
 */
public class MethodMetricsDao {

    private Connection connection;
    List<MethodMetrics> listMethodMetrics;
    MethodMetrics methodMetrics;
    ResultSet tableKeys;

    public MethodMetricsDao() {
        this.connection = ConnectionFactory.getConnection();
        listMethodMetrics = new ArrayList<>();
    }

    public int insert(MethodMetrics methodMetrics) {
        String sql = "INSERT INTO tb_methodMetrics "
                + "(ci,di,fin,fout,iovars,mclc,nbd,ncomp,nop,nvar,si,tloc,vg)"
                + "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) "
                + "RETURNING id;";
        
        PreparedStatement stmt = null;
        ResultSet tableKeys = null;
        
        try {
            stmt = connection.prepareStatement(sql);
            
            stmt.setInt(1, methodMetrics.getCi().getId());
            stmt.setInt(2, methodMetrics.getDi().getId());
            stmt.setInt(3, methodMetrics.getFin().getId());
            stmt.setInt(4, methodMetrics.getFout().getId());
            stmt.setInt(5, methodMetrics.getIovars().getId());
            stmt.setInt(6, methodMetrics.getMclc().getId());
            stmt.setInt(7, methodMetrics.getNbd().getId());
            stmt.setInt(8, methodMetrics.getNcomp().getId());
            stmt.setInt(9, methodMetrics.getNop().getId());
            stmt.setInt(10, methodMetrics.getNvar().getId());
            stmt.setInt(11, methodMetrics.getSi().getId());
            stmt.setInt(12, methodMetrics.getTloc().getId());
            stmt.setInt(13, methodMetrics.getVg().getId());
            
            tableKeys = stmt.executeQuery();
            tableKeys.next();
            int autoGeneratedID = tableKeys.getInt(1);
            stmt.close();
            return autoGeneratedID;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<MethodMetrics> select() {
        String sql = "SELECT * FROM tb_methodMetrics";

        MethodMetrics methodMetrics = null;
        List<MethodMetrics> listMethodMetrics = new ArrayList<>();
        MetricDao metricDao = new MetricDao();
        PreparedStatement stmt = null;

        ResultSet resultSet = null;
        try {
            stmt = connection.prepareStatement(sql);
            resultSet = stmt.executeQuery();
            while (resultSet.next()) {
                
                methodMetrics = new MethodMetrics();
                
                int ciID = resultSet.getInt("ci");
                int diID = resultSet.getInt("di");
                int finID = resultSet.getInt("fin");
                int foutID = resultSet.getInt("fout");
                int iovarsID = resultSet.getInt("iovars");
                int mclcID = resultSet.getInt("mclc");
                int nbdID = resultSet.getInt("nbd");
                int ncompID = resultSet.getInt("ncomp");
                int nopID = resultSet.getInt("nop");
                int nvarID = resultSet.getInt("nvar");
                int siID = resultSet.getInt("si");
                int tlocID = resultSet.getInt("tloc");
                int vgID = resultSet.getInt("vg");

                Metric ciIDMetric = metricDao.selectID(ciID);
                Metric diIDMetric = metricDao.selectID(diID);
                Metric finIDMetric = metricDao.selectID(finID);
                Metric foutIDMetric = metricDao.selectID(foutID);
                Metric iovarsIDMetric = metricDao.selectID(iovarsID);
                Metric mclcIDMetric = metricDao.selectID(mclcID);
                Metric nbdIDMetric = metricDao.selectID(nbdID);
                Metric ncompIDMetric = metricDao.selectID(ncompID);
                Metric nopIDMetric = metricDao.selectID(nopID);
                Metric nvarIDMetric = metricDao.selectID(nvarID);
                Metric siIDMetric = metricDao.selectID(siID);
                Metric tlocIDMetric = metricDao.selectID(tlocID);
                Metric vgIDMetric = metricDao.selectID(vgID);
                
                
                methodMetrics.setCi(ciIDMetric);
                methodMetrics.setDi(diIDMetric);
                methodMetrics.setFin(finIDMetric);
                methodMetrics.setFout(foutIDMetric);
                methodMetrics.setIovars(iovarsIDMetric);
                methodMetrics.setMclc(mclcIDMetric);
                methodMetrics.setNbd(nbdIDMetric);
                methodMetrics.setNcomp(ncompIDMetric);
                methodMetrics.setNop(nopIDMetric);
                methodMetrics.setNvar(nvarIDMetric);
                methodMetrics.setSi(siIDMetric);
                methodMetrics.setTloc(tlocIDMetric);
                methodMetrics.setVg(vgIDMetric);
                
                methodMetrics.setId(resultSet.getInt("id"));


            }
            listMethodMetrics.add(methodMetrics);
            stmt.close();
            return listMethodMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }

    public void delete(int id) {
        String sql = "DELETE FROM tb_methodMetrics WHERE id = ? ";

        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            //set values
            stmt.setInt(1, id);
            stmt.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void update(String column, String columnValue, int id) {
        String sql = "UPDATE tb_methodMetrics SET " + column + " = '" + columnValue + "' WHERE ID = '" + id + "'";
        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            stmt.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}
