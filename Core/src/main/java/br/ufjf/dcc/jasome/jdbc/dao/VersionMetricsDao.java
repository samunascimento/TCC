/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufjf.dcc.jasome.jdbc.dao;

import br.ufjf.dcc.gmr.core.db.ConnectionFactory;
import br.ufjf.dcc.gmr.core.jasome.model.Metric;
import br.ufjf.dcc.gmr.core.jasome.model.VersionMetrics;
import br.ufjf.dcc.gmr.core.vcs.types.Formats;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

/**
 *
 * @author anton
 */
public class VersionMetricsDao {

    private final Connection connection;

    public VersionMetricsDao(Connection connection) {
        this.connection = connection;
    }

    public int insert(VersionMetrics versionMetrics) throws SQLException {
        String sql = "INSERT INTO tb_versionmetrics "
                + "(tlocID,sha,authorname) "
                + "VALUES (?,?,?) "
                + "RETURNING id;";

        PreparedStatement stmt = null;

        ResultSet tableKeys = null;

        try {
            stmt = connection.prepareStatement(sql);

            if (versionMetrics.getTloc() == null) {
                stmt.setNull(1, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(1, versionMetrics.getTloc().getId());
            }
            stmt.setString(2, versionMetrics.getHash());

            stmt.setString(3, versionMetrics.getAuthorName());

            tableKeys = stmt.executeQuery();
            tableKeys.next();
            int autoGeneratedID = tableKeys.getInt(1);
            return autoGeneratedID;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public void delete(int id) throws SQLException {
        String sql = "DELETE FROM tb_versionmetrics WHERE ID = ?";

        PreparedStatement stmt = null;

        try {
            stmt = connection.prepareStatement(sql);
            //set values
            stmt.setInt(1, id);
            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public List<VersionMetrics> select() throws SQLException {

        VersionMetrics versionMetrics = null;

        List<VersionMetrics> listVersionMetrics = new ArrayList<>();

        MetricDao metricDao = new MetricDao(connection);

        String sql = "SELECT * FROM tb_versionmetrics ";

        PreparedStatement stmt = null;

        ResultSet resultSet = null;

        try {
            stmt = connection.prepareStatement(sql);

            resultSet = stmt.executeQuery();

            while (resultSet.next()) {

                versionMetrics = new VersionMetrics();

                int tlocID = resultSet.getInt("tlocID");

                Metric metric = metricDao.selectID(tlocID);

                versionMetrics.setTloc(metric);

                versionMetrics.setId(resultSet.getInt("id"));

                listVersionMetrics.add(versionMetrics);
            }
            return listVersionMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public VersionMetrics selectID(int id) throws SQLException {
        VersionMetrics versionMetrics;
        versionMetrics = new VersionMetrics();
        MetricDao metricDao = new MetricDao(connection);

        String sql = "SELECT * FROM tb_versionmetrics WHERE ID = " + id;

        PreparedStatement stmt = null;

        ResultSet resultSet = null;

        try {
            stmt = connection.prepareStatement(sql);
            resultSet = stmt.executeQuery();
            //tableKeys = stmt.getGeneratedKeys();
            resultSet.next();

            int tlocID = resultSet.getInt("tlocID");

            Metric metric = metricDao.selectID(tlocID);

            versionMetrics.setTloc(metric);

            versionMetrics.setId(resultSet.getInt("id"));

            return versionMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public void update(VersionMetrics verionMetric, int id) throws SQLException {
        String sql = null; // "UPDATE tb_versionMetrics SET tloc = '" + metric.getValue() + "' WHERE ID = '" + id + "'";

        PreparedStatement stmt = null;

        try {
            stmt = connection.prepareStatement(sql);
            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }
}
