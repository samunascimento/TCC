/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufjf.dcc.jasome.jdbc.dao;

import br.ufjf.dcc.gmr.core.db.ConnectionFactory;
import br.ufjf.dcc.gmr.core.jasome.model.Metric;
import br.ufjf.dcc.gmr.core.jasome.model.VersionMetrics;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

/**
 *
 * @author anton
 */
public class VersionMetricsDao {

    private final Connection connection;

    public VersionMetricsDao() {
        this.connection = ConnectionFactory.getConnection();
    }

    public int insert(VersionMetrics versionMetrics) {
        String sql = "INSERT INTO tb_versionMetrics "
                + "(tloc)"
                + "VALUES (?);";

        try {
            PreparedStatement stmt = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
            //set values
            stmt.setInt(1, versionMetrics.getTloc().getId());
            stmt.executeUpdate();
            ResultSet tableKeys;
            tableKeys = stmt.getGeneratedKeys();
            tableKeys.next();
            int autoGeneratedID = tableKeys.getInt(1);
            stmt.close();
            return autoGeneratedID;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void delete(int id) {
        String sql = "DELETE FROM tb_versionMetrics WHERE ID = ?";
        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            //set values
            stmt.setInt(1, id);
            stmt.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<VersionMetrics> select(int id) {
        VersionMetrics versionMetrics = new VersionMetrics();
        List<VersionMetrics> listVersionMetrics = new ArrayList<>();
        MetricDao metrics = new MetricDao();

        String sql = "SELECT * FROM tb_versionMetrics ";
        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            //set values
            //stmt.setInt(1, projectMetrics.getId());
            //stmt.setString(2, projectMetrics.getSourceDir());
            stmt.executeUpdate();
            ResultSet tableKeys;
            tableKeys = stmt.getGeneratedKeys();
            stmt.close();
            while (tableKeys.next()) {

                int tlocID = tableKeys.getInt("tloc");

                versionMetrics.getTloc().setId(tlocID);
                
                int versionId = tableKeys.getInt(1);
                
                versionMetrics.setId(versionId);

                versionMetrics.setTloc(metrics.selectID(versionMetrics.getTloc().getId()));

                listVersionMetrics.add(versionMetrics);
            }
            return listVersionMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public VersionMetrics selectID(int id) throws SQLException {
        VersionMetrics versionMetrics;
        versionMetrics = new VersionMetrics();
        MetricDao metrics = new MetricDao();

        String sql = "SELECT * FROM tb_projectMetrics WHERE ID = " + id;
        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            stmt.executeUpdate();
            ResultSet tableKeys;
            tableKeys = stmt.getGeneratedKeys();
            tableKeys.next();
            stmt.close();

            int tlocID = tableKeys.getInt("tloc");

            versionMetrics.getTloc().setId(tlocID);

            versionMetrics.setTloc(metrics.selectID(versionMetrics.getTloc().getId()));

            return versionMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void update(Metric metric, String id) {
        String sql = "UPDATE tb_versionMetrics SET tloc = '" + metric.getValue() + "' WHERE ID = '" + id + "'";
        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            stmt.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}
