/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufjf.dcc.jasome.jdbc.dao;

import br.ufjf.dcc.gmr.core.jasome.model.ProjectMetrics;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

/**
 *
 * @author anton
 */
public class ProjectMetricsDao {

    private final Connection connection;

    public ProjectMetricsDao(Connection connection) {
        this.connection = connection;
    }

    public int insert(ProjectMetrics projectMetrics) throws SQLException {

        String sql = "INSERT INTO tb_projectMetrics "
                + "(sourceDir,projectname) "
                + "VALUES (?,?) "
                + "RETURNING id;";

        PreparedStatement stmt = null;

        ResultSet tableKeys = null;

        try {
            stmt = connection.prepareStatement(sql);
            //set value
            stmt.setString(1, projectMetrics.getSourceDir());
            stmt.setString(2, projectMetrics.getName());
            tableKeys = stmt.executeQuery();
            tableKeys.next();

            int autoGeneratedID = tableKeys.getInt(1);

            return autoGeneratedID;

        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public void delete(int id) throws SQLException {
        String sql = "DELETE FROM tb_projectMetrics WHERE ID = ?";

        PreparedStatement stmt = null;

        try {
            stmt = connection.prepareStatement(sql);
            //set values
            stmt.setInt(1, id);
            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public List<ProjectMetrics> select() throws SQLException {
        List<ProjectMetrics> listProjectMetrics = new ArrayList<>();
        MetricDao metrics = new MetricDao(connection);
        ProjectMetrics projectMetrics;
        projectMetrics = new ProjectMetrics();

        String sql = "SELECT * FROM tb_projectMetrics ";

        ResultSet resultSet = null;

        PreparedStatement stmt = null;
        try {
            stmt = connection.prepareStatement(sql);
            resultSet = stmt.executeQuery();
            while (resultSet.next()) {
                projectMetrics = new ProjectMetrics();
                int id = resultSet.getInt("ID");
                String repositoryPath = resultSet.getString("sourceDir");
                String projectName = resultSet.getString("projectname");
                projectMetrics.setId(id);
                projectMetrics.setSourceDir(repositoryPath);
                projectMetrics.setName(projectName);
                listProjectMetrics.add(projectMetrics);
            }
            return listProjectMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public ProjectMetrics selectID(int id) throws SQLException {
        ProjectMetrics projectMetrics;
        projectMetrics = new ProjectMetrics();

        String sql = "SELECT * FROM tb_projectMetrics WHERE ID = " + id;

        PreparedStatement stmt = null;

        ResultSet resultSet = null;

        try {
            stmt = connection.prepareStatement(sql);
            resultSet = stmt.executeQuery();
            resultSet.next();

            int projectId = resultSet.getInt("ID");
            String repositoryPath = resultSet.getString("sourceDir");
            String projectName = resultSet.getString("projectname");
            projectMetrics.setId(id);
            projectMetrics.setSourceDir(repositoryPath);
            projectMetrics.setName(projectName);
            return projectMetrics;

        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public void update(String sourceDir, int id) throws SQLException {
        String sql = "UPDATE tb_projectMetrics SET sourceDir = '" + sourceDir + "' WHERE ID = '" + id + "'";

        PreparedStatement stmt = null;

        try {
            stmt = connection.prepareStatement(sql);
            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public int searchVersion(int id) throws SQLException {
        String sql = "select a.analyzed, a.id , a.Sha, b.project_id, b.version_id\n"
                + "                from tb_versionmetrics as a\n"
                + "                inner join tb_project_version as b\n"
                + "                on a.id = b.version_id \n"
                + "                where b.project_id = " + id + "\n"
                + "		order by id";

        PreparedStatement stmt = null;

        ResultSet resultSet = null;
        
        int size = 0;

        try {
            stmt = connection.prepareStatement(sql);
            resultSet = stmt.executeQuery();
            while (resultSet.next()) {             
                    size++;
            }
            return size ;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }
}
