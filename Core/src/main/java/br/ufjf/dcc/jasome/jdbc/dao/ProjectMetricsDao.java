/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufjf.dcc.jasome.jdbc.dao;

import br.ufjf.dcc.gmr.core.db.ConnectionFactory;
import br.ufjf.dcc.gmr.core.jasome.model.ProjectMetrics;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

/**
 *
 * @author anton
 */
public class ProjectMetricsDao {

    private final Connection connection;

    public ProjectMetricsDao() {
        this.connection = ConnectionFactory.getConnection();
    }

    public int insert(ProjectMetrics projectMetrics) throws SQLException {

        String sql = "INSERT INTO tb_projectMetrics "
                + "(sourceDir)"
                + "VALUES (?);";

        PreparedStatement stmt = null;

        ResultSet tableKeys = null;

        try {
            stmt = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
            //set value
            stmt.setString(1, projectMetrics.getSourceDir());
            tableKeys = stmt.executeQuery();
            tableKeys.next();

            int autoGeneratedID = tableKeys.getInt(1);

            return autoGeneratedID;

        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public void delete(int id) throws SQLException {
        String sql = "DELETE FROM tb_projectMetrics WHERE ID = ?";

        PreparedStatement stmt = null;

        try {
            stmt = connection.prepareStatement(sql);
            //set values
            stmt.setInt(1, id);
            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public List<ProjectMetrics> select() throws SQLException {
        List<ProjectMetrics> listProjectMetrics = new ArrayList<>();
        MetricDao metrics = new MetricDao();
        ProjectMetrics projectMetrics;
        projectMetrics = new ProjectMetrics();

        String sql = "SELECT * FROM tb_projectMetrics ";

        ResultSet tableKeys = null;

        PreparedStatement stmt = null;
        try {
            stmt = connection.prepareStatement(sql);
            tableKeys = stmt.executeQuery();
            //tableKeys = stmt.getGeneratedKeys();
            while (tableKeys.next()) {
                int ID = tableKeys.getInt("ID");
                projectMetrics.setId(ID);
                listProjectMetrics.add(projectMetrics);
            }
            return listProjectMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public ProjectMetrics selectID(int id) throws SQLException {
        ProjectMetrics projectMetrics;
        projectMetrics = new ProjectMetrics();

        String sql = "SELECT * FROM tb_projectMetrics WHERE ID = " + id;

        PreparedStatement stmt = null;

        ResultSet tableKeys = null;

        try {
            stmt = connection.prepareStatement(sql);
            tableKeys = stmt.executeQuery();
            //tableKeys = stmt.getGeneratedKeys();
            tableKeys.next();
            
            int projectId = tableKeys.getInt(1);
            projectMetrics.setId(projectId);
            return projectMetrics;
            
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }

    public void update(String sourceDir, int id) throws SQLException {
        String sql = "UPDATE tb_projectMetrics SET sourceDir = '" + sourceDir + "' WHERE ID = '" + id + "'";

        PreparedStatement stmt = null;

        try {
            stmt = connection.prepareStatement(sql);
            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }
    }
}
