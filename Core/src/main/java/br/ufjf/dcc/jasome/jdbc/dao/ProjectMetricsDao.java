/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufjf.dcc.jasome.jdbc.dao;

import br.ufjf.dcc.gmr.core.db.ConnectionFactory;
import br.ufjf.dcc.gmr.core.jasome.model.ProjectMetrics;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

/**
 *
 * @author anton
 */
public class ProjectMetricsDao {
        private final Connection connection;
        private ResultSet tableKeys;

    public ProjectMetricsDao() {
        this.connection = ConnectionFactory.getConnection();
    }
    
    public int insert(ProjectMetrics projectMetrics){
        
        String sql = "INSERT INTO tb_projectMetrics " +
        "(sourceDir)" +
        "VALUES (?);";

        try{
            PreparedStatement stmt = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
            //set value
            stmt.setString(1, projectMetrics.getSourceDir());
            stmt.executeUpdate();
            ResultSet tableKeys = stmt.getGeneratedKeys();
            tableKeys.next();
            int autoGeneratedID = tableKeys.getInt(1);
            stmt.close();
            return autoGeneratedID;
        } catch(SQLException e){
            throw new RuntimeException(e);
        }  
    }
    public void delete(int id){
        String sql = "DELETE FROM tb_projectMetrics WHERE ID = ?";
        try{
            PreparedStatement stmt = connection.prepareStatement(sql);
            //set values
            stmt.setInt(1, id);
            stmt.executeUpdate();
            stmt.close();
        } catch(SQLException e){
            throw new RuntimeException(e);
        }  
    }
    
    public List<ProjectMetrics> select(){
        List<ProjectMetrics> listProjectMetrics = new ArrayList<>();
        MetricDao metrics = new MetricDao();
        ProjectMetrics projectMetrics;
        projectMetrics = new ProjectMetrics();
        
        String sql = "SELECT * FROM tb_projectMetrics ";
        try{
            PreparedStatement stmt = connection.prepareStatement(sql);
            stmt.executeUpdate();
            tableKeys = stmt.getGeneratedKeys();
            stmt.close();
            while (tableKeys.next()) {
                int ID = tableKeys.getInt("ID");
                projectMetrics.setId(ID);
                this.listProjectMetrics.add(projectMetrics);
            }
            return listProjectMetrics;
        } catch(SQLException e){
            throw new RuntimeException(e);
        }  
    }
    
    public ProjectMetrics selectID(int id) throws SQLException{
        ProjectMetrics projectMetrics;
        projectMetrics = new ProjectMetrics();
        
        String sql = "SELECT * FROM tb_projectMetrics WHERE ID = " + id;
        try{
            PreparedStatement stmt = connection.prepareStatement(sql);
            stmt.executeUpdate();
            tableKeys = stmt.getGeneratedKeys();
            stmt.close();
            int projectId = tableKeys.getInt(1);
            projectMetrics.setId(projectId);
            return projectMetrics;
        } catch(SQLException e){
            throw new RuntimeException(e);
        }  
    }
    
    public void update(String sourceDir, int id){
        String sql = "UPDATE tb_projectMetrics SET sourceDir = '" + sourceDir + "' WHERE ID = '" + id + "'";
        try{
            PreparedStatement stmt = connection.prepareStatement(sql);  
            stmt.executeUpdate();
            stmt.close();
        } catch(SQLException e){
            throw new RuntimeException(e);
        }  
    }
}
