/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufjf.dcc.jasome.jdbc.dao;

import br.ufjf.dcc.gmr.core.db.ConnectionFactory;
import br.ufjf.dcc.gmr.core.jasome.model.PackageMetrics;
import br.ufjf.dcc.gmr.core.jasome.model.ProjectMetrics;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

/**
 *
 * @author anton
 */
public class PackageMetricsDao {

    private final Connection connection;
    List<PackageMetrics> listPackageMetrics;
    
    public PackageMetricsDao() {
        this.connection = ConnectionFactory.getConnection();
        listPackageMetrics = new ArrayList<>();
    }

    public int insert(PackageMetrics packageMetrics) {
        String sql = "INSERT INTO tb_packageMetrics "
                + "(aID,ccrcID,caID,ceID,dmsID,iID,nocID,noiID,pkgRCiD,pkgTCiID,tlocID)"
                + "VALUES (?,?,?,?,?,?,?,?,?,?,?);";
        try {
            PreparedStatement stmt = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
            stmt.setInt(1, Integer.parseInt(packageMetrics.getA().getId()));
            stmt.setInt(2, Integer.parseInt(packageMetrics.getCcrc().getId()));
            stmt.setInt(3, Integer.parseInt(packageMetrics.getCa().getId()));
            stmt.setInt(4, Integer.parseInt(packageMetrics.getA().getId()));
            stmt.setInt(5, Integer.parseInt(packageMetrics.getCe().getId()));
            stmt.setInt(6, Integer.parseInt(packageMetrics.getDms().getId()));
            stmt.setInt(7, Integer.parseInt(packageMetrics.getI().getId()));
            stmt.setInt(8, Integer.parseInt(packageMetrics.getNoc().getId()));
            stmt.setInt(9, Integer.parseInt(packageMetrics.getPkgRCi().getId()));
            stmt.setInt(10, Integer.parseInt(packageMetrics.getPkgTCi().getId()));
            stmt.setInt(11, Integer.parseInt(packageMetrics.getTloc().getId()));
            stmt.executeUpdate();
            ResultSet tableKeys = stmt.getGeneratedKeys();
            tableKeys.next();
            int autoGeneratedID = tableKeys.getInt(1);
            stmt.close();
            return autoGeneratedID;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void delete(int id) {
        String sql = "DELETE FROM tb_packageMetrics WHERE ID = ?";
        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            //set values
            stmt.setInt(1, id);
            stmt.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<PackageMetrics> select(PackageMetrics packageMetrics) {
        this.listPackageMetrics.add(packageMetrics);
        String sql = "SELECT * FROM tb_packageMetrics ";
        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            //set values
            //stmt.setInt(1, projectMetrics.getId());
            //stmt.setString(2, projectMetrics.getSourceDir());
            stmt.executeUpdate();
            stmt.close();
            return this.listPackageMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}
