/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufjf.dcc.jasome.jdbc.dao;

import br.ufjf.dcc.gmr.core.db.ConnectionFactory;
import br.ufjf.dcc.gmr.core.jasome.model.PackageMetrics;
import br.ufjf.dcc.gmr.core.jasome.model.ProjectMetrics;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

/**
 *
 * @author anton
 */
public class PackageMetricsDao {

    private final Connection connection;
    private List<PackageMetrics> listPackageMetrics;
    private ResultSet tableKeys;
    private PackageMetrics packageMetrics;
    private MetricDao metrics;

    public PackageMetricsDao() {
        this.connection = ConnectionFactory.getConnection();
        listPackageMetrics = new ArrayList<>();
        packageMetrics = new PackageMetrics();
    }

    public int insert(PackageMetrics packageMetrics) {

        String sql = "INSERT INTO tb_packageMetrics "
                + "(aID,ccrcID,caID,ceID,dmsID,iID,nocID,noiID,pkgRCiD,pkgTCiID,tlocID)"
                + "VALUES (?,?,?,?,?,?,?,?,?,?,?);";
        try {
            PreparedStatement stmt = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
            stmt.setInt(1, packageMetrics.getA().getId());
            stmt.setInt(2, packageMetrics.getCcrc().getId());
            stmt.setInt(3, packageMetrics.getCa().getId());
            stmt.setInt(4, packageMetrics.getCe().getId());
            stmt.setInt(5, packageMetrics.getDms().getId());
            stmt.setInt(6, packageMetrics.getI().getId());
            stmt.setInt(7, packageMetrics.getNoc().getId());
            stmt.setInt(8, packageMetrics.getNoi().getId());
            stmt.setInt(9, packageMetrics.getPkgRCi().getId());
            stmt.setInt(10, packageMetrics.getPkgTCi().getId());
            stmt.setInt(11, packageMetrics.getTloc().getId());
            stmt.executeUpdate();
            tableKeys = stmt.getGeneratedKeys();
            tableKeys.next();
            int autoGeneratedID = tableKeys.getInt(1);
            stmt.close();
            return autoGeneratedID;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void delete(int id) {
        String sql = "DELETE FROM tb_packageMetrics WHERE ID = ?";
        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            //set values
            stmt.setInt(1, id);
            stmt.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<PackageMetrics> select() throws SQLException {

        String sql = "SELECT * FROM tb_packageMetrics ";
        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            //set values
            //stmt.setInt(1, projectMetrics.getId());
            //stmt.setString(2, projectMetrics.getSourceDir());
            stmt.executeUpdate();
            stmt.close();

            while (tableKeys.next()) {
                int aID = tableKeys.getInt("aID");
                int ccrcID = tableKeys.getInt("ccrcID");
                int caID = tableKeys.getInt("caID");
                int ceID = tableKeys.getInt("ceID");
                int dmsID = tableKeys.getInt("dmsID");
                int iID = tableKeys.getInt("iID");
                int nocID = tableKeys.getInt("nocID");
                int noiID = tableKeys.getInt("noiID");
                int pkgrcID = tableKeys.getInt("pkgRCiD");
                int pkgtciID = tableKeys.getInt("pkgTCiID");
                int tlocID = tableKeys.getInt("tlocID");

                /*metrics.getaID().setDescription(tableKeys.getString(2));
                metrics.getaID().setName(tableKeys.getString(3));
                metrics.getaID().setValue(Float.toString(tableKeys.getFloat(4)));
                metrics.getCcrcID().setDescription(tableKeys.getString(2));
                metrics.getCcrcID().setName(tableKeys.getString(3));
                metrics.getCcrcID().setValue(Float.toString(tableKeys.getFloat(4)));
                metrics.getCaID().setDescription(tableKeys.getString(2));
                metrics.getCaID().setName(tableKeys.getString(3));
                metrics.getCaID().setValue(Float.toString(tableKeys.getFloat(4)));
                metrics.getCeID().setDescription(tableKeys.getString(2));
                metrics.getCeID().setName(tableKeys.getString(3));
                metrics.getCeID().setValue(Float.toString(tableKeys.getFloat(4)));
                metrics.getDmsID().setDescription(tableKeys.getString(2));
                metrics.getDmsID().setName(tableKeys.getString(3));
                metrics.getDmsID().setValue(Float.toString(tableKeys.getFloat(4)));
                metrics.getiID().setDescription(tableKeys.getString(2));
                metrics.getiID().setName(tableKeys.getString(3));
                metrics.getiID().setValue(Float.toString(tableKeys.getFloat(4)));
                metrics.getNocID().setDescription(tableKeys.getString(2));
                metrics.getNocID().setName(tableKeys.getString(3));
                metrics.getNocID().setValue(Float.toString(tableKeys.getFloat(4)));
                metrics.getNoiID().setDescription(tableKeys.getString(2));
                metrics.getNoiID().setName(tableKeys.getString(3));
                metrics.getNoiID().setValue(Float.toString(tableKeys.getFloat(4)));
                metrics.getPkgRCiID().setDescription(tableKeys.getString(2));
                metrics.getPkgRCiID().setName(tableKeys.getString(3));
                metrics.getPkgRCiID().setValue(Float.toString(tableKeys.getFloat(4)));
                metrics.getPkgTCiID().setDescription(tableKeys.getString(2));
                metrics.getPkgTCiID().setName(tableKeys.getString(3));
                metrics.getPkgTCiID().setValue(Float.toString(tableKeys.getFloat(4)));
                metrics.getTlocID().setDescription(tableKeys.getString(2));
                metrics.getTlocID().setName(tableKeys.getString(3));
                metrics.getTlocID().setValue(Float.toString(tableKeys.getFloat(4)));*/

                packageMetrics.getA().setId(aID);
                packageMetrics.getCcrc().setId(ccrcID);
                packageMetrics.getCa().setId(caID);
                packageMetrics.getCe().setId(ceID);
                packageMetrics.getDms().setId(dmsID);
                packageMetrics.getI().setId(iID);
                packageMetrics.getNoc().setId(nocID);
                packageMetrics.getNoi().setId(noiID);
                packageMetrics.getPkgRCi().setId(pkgrcID);
                packageMetrics.getPkgTCi().setId(pkgtciID);
                packageMetrics.getTloc().setId(tlocID);

                this.listPackageMetrics.add(packageMetrics);
            }

            return this.listPackageMetrics;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
    
    public void update(String column, String columnValue , int id){
        String sql = "UPDATE tb_packageMetrics SET " + column + " = '" + columnValue + "' WHERE ID = '" + id + "'";
        try{
            PreparedStatement stmt = connection.prepareStatement(sql);  
            stmt.executeUpdate();
            stmt.close();
        } catch(SQLException e){
            throw new RuntimeException(e);
        }  
    }
}
