package br.ufjf.dcc.jasome.jdbc.dao;

import br.ufjf.dcc.gmr.core.db.ConnectionFactory;
import br.ufjf.dcc.gmr.core.jasome.model.ClassMetrics;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author anton
 */
public class ClassMetricsDao {

    private Connection connection;
    List<ClassMetrics> listClassMetrics;
    ClassMetrics classMetrics;
    ResultSet tableKeys;

    public ClassMetricsDao(){
        this.connection = ConnectionFactory.getConnection();
        listClassMetrics = new ArrayList<>();
    }
    
    
    public int insert(ClassMetrics classMetrics) {
        String sql = "INSERT INTO tb_classMetrics "
                + "(aa,ad,ai,ait,ao,av,clrci,cltci,dit,hmd,hmi,mhf,mif,ma,md,"
                + "mi,mit,mo,nf,nm,nma,nmi,noa,noch,nod,nol,nopa,norm,npf,npm,nsf,"
                + "nsm,pmr,pmd,pmi,rtloc,six,tloc,wmc)"
                + "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,);";
        try {
            PreparedStatement stmt = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
            stmt.setInt(1, classMetrics.getAa().getId());
            stmt.setInt(2, classMetrics.getAd().getId());
            stmt.setInt(3, classMetrics.getAi().getId());
            stmt.setInt(4, classMetrics.getAit().getId());
            stmt.setInt(5, classMetrics.getAo().getId());
            stmt.setInt(6, classMetrics.getAv().getId());
            stmt.setInt(7, classMetrics.getClrci().getId());
            stmt.setInt(8, classMetrics.getCltci().getId());
            stmt.setInt(9, classMetrics.getDit().getId());
            stmt.setInt(10, classMetrics.getHmd().getId());
            stmt.setInt(11, classMetrics.getHmi().getId());
            stmt.setInt(12, classMetrics.getMhf().getId());
            stmt.setInt(13, classMetrics.getMif().getId());
            stmt.setInt(14, classMetrics.getMa().getId());
            stmt.setInt(15, classMetrics.getMd().getId());
            stmt.setInt(16, classMetrics.getMi().getId());
            stmt.setInt(17, classMetrics.getMit().getId());
            stmt.setInt(18, classMetrics.getMo().getId());
            stmt.setInt(19, classMetrics.getNf().getId());
            stmt.setInt(20, classMetrics.getNm().getId());
            stmt.setInt(21, classMetrics.getNma().getId());
            stmt.setInt(22, classMetrics.getNmi().getId());
            stmt.setInt(23, classMetrics.getNoa().getId());
            stmt.setInt(24, classMetrics.getNoch().getId());
            stmt.setInt(25, classMetrics.getNod().getId());
            stmt.setInt(26, classMetrics.getNol().getId());
            stmt.setInt(27, classMetrics.getNopa().getId());
            stmt.setInt(28, classMetrics.getNorm().getId());
            stmt.setInt(29, classMetrics.getNpf().getId());
            stmt.setInt(30, classMetrics.getNpm().getId());
            stmt.setInt(31, classMetrics.getNsf().getId());
            stmt.setInt(32, classMetrics.getNsm().getId());
            stmt.setInt(33, classMetrics.getPmr().getId());
            stmt.setInt(34, classMetrics.getPmd().getId());
            stmt.setInt(35, classMetrics.getPmi().getId());
            stmt.setInt(36, classMetrics.getRtloc().getId());
            stmt.setInt(37, classMetrics.getSix().getId());
            stmt.setInt(38, classMetrics.getTloc().getId());
            stmt.setInt(39, classMetrics.getWmc().getId());
            stmt.executeUpdate();
            tableKeys = stmt.getGeneratedKeys();
            tableKeys.next();
            int autoGeneratedID = tableKeys.getInt(1);
            stmt.close();
            return autoGeneratedID;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
    
    public void delete(int id) {
        String sql = "DELETE FROM tb_classMetrics WHERE ID = ?";
        try {
            PreparedStatement stmt = connection.prepareStatement(sql);
            //set values
            stmt.setInt(1, id);
            stmt.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
    
    public List<ClassMetrics> select() throws SQLException{
        String sql = "SELECT * FROM tb_classMetrics";
        
        try{
            PreparedStatement stmt = connection.prepareStatement(sql);

            while(tableKeys.next()){
                int aaID = tableKeys.getInt("aaID");
                int adID = tableKeys.getInt("adID");
                int aiID = tableKeys.getInt("aiID");
                int aitID = tableKeys.getInt("aitID");
                int aoID = tableKeys.getInt("aoID");
                int avID = tableKeys.getInt("avID");
                int clrciID = tableKeys.getInt("clrciID");
                int cltciID = tableKeys.getInt("cltciID");
                int ditID = tableKeys.getInt("ditID");
                int hmdID = tableKeys.getInt("hmdID");
                int hmiID = tableKeys.getInt("hmiID");
                int mhfID = tableKeys.getInt("mhfID");
                int mifID = tableKeys.getInt("mifID");
                int maID = tableKeys.getInt("maID");
                int mdID = tableKeys.getInt("mdID");
                int miID = tableKeys.getInt("miID");
                int mitID = tableKeys.getInt("mitID");
                int moID = tableKeys.getInt("moID");
                int nfID = tableKeys.getInt("nfID");
                int nmID = tableKeys.getInt("nmID");
                int nmaID = tableKeys.getInt("nmaID");
                int nmiID = tableKeys.getInt("nmiID");
                int noaID = tableKeys.getInt("noaID");
                int nochID = tableKeys.getInt("nochID");
                int nodID = tableKeys.getInt("nodID");
                int nolID = tableKeys.getInt("nolID");
                int nopaID = tableKeys.getInt("nopaID");
                int normID = tableKeys.getInt("normID");
                int npfID = tableKeys.getInt("npfID");
                int npmID = tableKeys.getInt("npmID");
                int nsfID = tableKeys.getInt("nsfID");
                int nsmID = tableKeys.getInt("nsmID");
                int pmrID = tableKeys.getInt("pmrID");
                int pmdID = tableKeys.getInt("pmdID");
                int pmiID = tableKeys.getInt("pmiID");
                int rtlocID = tableKeys.getInt("rtlocID");
                int sixID = tableKeys.getInt("sixID");
                int tlocID = tableKeys.getInt("tlocID");
                int wmcID = tableKeys.getInt("wmcID");

                classMetrics.getAa().setId(aaID);
                classMetrics.getAd().setId(adID);
                classMetrics.getAi().setId(aiID);
                classMetrics.getAit().setId(aitID);
                classMetrics.getAo().setId(aoID);
                classMetrics.getAv().setId(avID);
                classMetrics.getClrci().setId(clrciID);
                classMetrics.getCltci().setId(cltciID);
                classMetrics.getDit().setId(ditID);
                classMetrics.getHmd().setId(hmdID);
                classMetrics.getHmi().setId(hmiID);
                classMetrics.getMhf().setId(mhfID);
                classMetrics.getMif().setId(mifID);
                classMetrics.getMa().setId(maID);
                classMetrics.getMd().setId(mdID);
                classMetrics.getMi().setId(miID);
                classMetrics.getMit().setId(mitID);
                classMetrics.getMo().setId(moID);
                classMetrics.getNf().setId(nfID);
                classMetrics.getNm().setId(nmID);
                classMetrics.getNma().setId(nmaID);
                classMetrics.getNmi().setId(nmiID);
                classMetrics.getNoa().setId(noaID);
                classMetrics.getNoch().setId(nochID);
                classMetrics.getNod().setId(nodID);
                classMetrics.getNol().setId(nolID);
                classMetrics.getNopa().setId(nopaID);
                classMetrics.getNorm().setId(normID);
                classMetrics.getNpf().setId(npfID);
                classMetrics.getNpm().setId(npmID);
                classMetrics.getNsf().setId(nsfID);
                classMetrics.getNsm().setId(nsmID);
                classMetrics.getPmr().setId(pmrID);
                classMetrics.getPmd().setId(pmdID);
                classMetrics.getPmi().setId(pmiID);
                classMetrics.getRtloc().setId(rtlocID);
                classMetrics.getSix().setId(sixID);
                classMetrics.getTloc().setId(tlocID);
                classMetrics.getWmc().setId(wmcID);

                this.listClassMetrics.add(classMetrics);

            }
            stmt.executeUpdate();
            stmt.close();
            return this.listClassMetrics;
        }catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
    
    
}
